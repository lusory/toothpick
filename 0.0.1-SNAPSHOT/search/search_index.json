{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 toothpick is a simple, lightweight dependency injection framework ( JSR-330 ) for JVM based languages. Features \u00b6 Constructor injection Usage \u00b6 Maven \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <repositories> <repository> <id> lusory-repo-releases </id> <url> https://repo.lusory.dev/releases </url> </repository> <repository> <id> lusory-repo-snapshots </id> <url> https://repo.lusory.dev/snapshots </url> </repository> </repositories> <dependencies> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> core </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> <!-- optional kotlin extensions (transitively pulls in core) --> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> kotlin </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> </dependencies> Gradle \u00b6 Groovy DSL \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 repositories { maven { url 'https://repo.lusory.dev/releases' } maven { url 'https://repo.lusory.dev/snapshots' } } dependencies { implementation 'me.lusory.toothpick:core:0.0.1-SNAPSHOT' // optional kotlin extensions (transitively pulls in core) implementation 'me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT' } Kotlin DSL \u00b6 1 2 3 4 5 6 7 8 9 10 repositories { maven ( \"https://repo.lusory.dev/releases\" ) maven ( \"https://repo.lusory.dev/snapshots\" ) } dependencies { implementation ( \"me.lusory.toothpick:core:0.0.1-SNAPSHOT\" ) // optional kotlin extensions (transitively pulls in core) implementation ( \"me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT\" ) }","title":"Home"},{"location":"#home","text":"toothpick is a simple, lightweight dependency injection framework ( JSR-330 ) for JVM based languages.","title":"Home"},{"location":"#features","text":"Constructor injection","title":"Features"},{"location":"#usage","text":"","title":"Usage"},{"location":"#maven","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <repositories> <repository> <id> lusory-repo-releases </id> <url> https://repo.lusory.dev/releases </url> </repository> <repository> <id> lusory-repo-snapshots </id> <url> https://repo.lusory.dev/snapshots </url> </repository> </repositories> <dependencies> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> core </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> <!-- optional kotlin extensions (transitively pulls in core) --> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> kotlin </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> </dependencies>","title":"Maven"},{"location":"#gradle","text":"","title":"Gradle"},{"location":"#groovy-dsl","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 repositories { maven { url 'https://repo.lusory.dev/releases' } maven { url 'https://repo.lusory.dev/snapshots' } } dependencies { implementation 'me.lusory.toothpick:core:0.0.1-SNAPSHOT' // optional kotlin extensions (transitively pulls in core) implementation 'me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT' }","title":"Groovy DSL"},{"location":"#kotlin-dsl","text":"1 2 3 4 5 6 7 8 9 10 repositories { maven ( \"https://repo.lusory.dev/releases\" ) maven ( \"https://repo.lusory.dev/snapshots\" ) } dependencies { implementation ( \"me.lusory.toothpick:core:0.0.1-SNAPSHOT\" ) // optional kotlin extensions (transitively pulls in core) implementation ( \"me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT\" ) }","title":"Kotlin DSL"},{"location":"benchmarks/","text":"Benchmarks \u00b6 Benchmarking is done via the Java Microbenchmark Harness (JMH), two other popular DI frameworks are included for comparison: Feather Guice The benchmark source code can be viewed here . If you want to benchmark yourself, run the jmh Gradle task ( ./gradlew jmh , may take around 20 minutes to complete). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # ref: 818f57ba5fe0568a31501b641486645454a2fc57 # Warmup: 5 iterations, 10 s each # Measurement: 5 iterations, 10 s each # Timeout: 10 min per iteration # Threads: 1 thread, will synchronize iterations # Benchmark mode: Throughput, ops/time Result \"me.lusory.toothpick.jmh.InjectorBenchmarkTest.injectFeather\": 2292110,973 \u00b1(99.9%) 23716,448 ops/s [Average] (min, avg, max) = (2215965,796, 2292110,973, 2342697,310), stdev = 31660,779 CI (99.9%): [2268394,525, 2315827,420] (assumes normal distribution) Result \"me.lusory.toothpick.jmh.InjectorBenchmarkTest.injectGuice\": 64629,688 \u00b1(99.9%) 2341,572 ops/s [Average] (min, avg, max) = (59531,646, 64629,688, 70265,624), stdev = 3125,932 CI (99.9%): [62288,115, 66971,260] (assumes normal distribution) Result \"me.lusory.toothpick.jmh.InjectorBenchmarkTest.injectToothpick\": 418040,166 \u00b1(99.9%) 25708,211 ops/s [Average] (min, avg, max) = (370046,111, 418040,166, 470898,187), stdev = 34319,726 CI (99.9%): [392331,955, 443748,378] (assumes normal distribution) Benchmark Mode Cnt Score Error Units InjectorBenchmarkTest.injectFeather thrpt 25 2292110,973 \u00b1 23716,448 ops/s InjectorBenchmarkTest.injectGuice thrpt 25 64629,688 \u00b1 2341,572 ops/s InjectorBenchmarkTest.injectToothpick thrpt 25 418040,166 \u00b1 25708,211 ops/s","title":"Benchmarks"},{"location":"benchmarks/#benchmarks","text":"Benchmarking is done via the Java Microbenchmark Harness (JMH), two other popular DI frameworks are included for comparison: Feather Guice The benchmark source code can be viewed here . If you want to benchmark yourself, run the jmh Gradle task ( ./gradlew jmh , may take around 20 minutes to complete). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # ref: 818f57ba5fe0568a31501b641486645454a2fc57 # Warmup: 5 iterations, 10 s each # Measurement: 5 iterations, 10 s each # Timeout: 10 min per iteration # Threads: 1 thread, will synchronize iterations # Benchmark mode: Throughput, ops/time Result \"me.lusory.toothpick.jmh.InjectorBenchmarkTest.injectFeather\": 2292110,973 \u00b1(99.9%) 23716,448 ops/s [Average] (min, avg, max) = (2215965,796, 2292110,973, 2342697,310), stdev = 31660,779 CI (99.9%): [2268394,525, 2315827,420] (assumes normal distribution) Result \"me.lusory.toothpick.jmh.InjectorBenchmarkTest.injectGuice\": 64629,688 \u00b1(99.9%) 2341,572 ops/s [Average] (min, avg, max) = (59531,646, 64629,688, 70265,624), stdev = 3125,932 CI (99.9%): [62288,115, 66971,260] (assumes normal distribution) Result \"me.lusory.toothpick.jmh.InjectorBenchmarkTest.injectToothpick\": 418040,166 \u00b1(99.9%) 25708,211 ops/s [Average] (min, avg, max) = (370046,111, 418040,166, 470898,187), stdev = 34319,726 CI (99.9%): [392331,955, 443748,378] (assumes normal distribution) Benchmark Mode Cnt Score Error Units InjectorBenchmarkTest.injectFeather thrpt 25 2292110,973 \u00b1 23716,448 ops/s InjectorBenchmarkTest.injectGuice thrpt 25 64629,688 \u00b1 2341,572 ops/s InjectorBenchmarkTest.injectToothpick thrpt 25 418040,166 \u00b1 25708,211 ops/s","title":"Benchmarks"},{"location":"examples/","text":"Examples \u00b6 Creating an Injector \u00b6 An Injector instance can be created with the Injector#of method (invoke operator for Kotlin is available). Java \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector ; // ... // dynamically populated injector (no providers by default) final Injector injector = Injector . of (); // pre-populated injector final Injector injector = Injector . of ( new Module1 ()); // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 . class ); // equals to injector.provider(Module1.class).get() injector . instance ( Module1 . class ); Kotlin \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector // ... // dynamically populated injector (no providers by default) val injector = Injector () // pre-populated injector val injector = Injector ( Module1 ()) // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 :: class ) // equals to injector . provider ( Module1 . class ). get () injector [ Module1 :: class ]","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#creating-an-injector","text":"An Injector instance can be created with the Injector#of method (invoke operator for Kotlin is available).","title":"Creating an Injector"},{"location":"examples/#java","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector ; // ... // dynamically populated injector (no providers by default) final Injector injector = Injector . of (); // pre-populated injector final Injector injector = Injector . of ( new Module1 ()); // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 . class ); // equals to injector.provider(Module1.class).get() injector . instance ( Module1 . class );","title":"Java"},{"location":"examples/#kotlin","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector // ... // dynamically populated injector (no providers by default) val injector = Injector () // pre-populated injector val injector = Injector ( Module1 ()) // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 :: class ) // equals to injector . provider ( Module1 . class ). get () injector [ Module1 :: class ]","title":"Kotlin"}]}
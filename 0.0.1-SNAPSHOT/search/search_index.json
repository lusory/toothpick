{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 toothpick is a simple, lightweight dependency injection framework ( JSR-330 ) for JVM based languages. Features \u00b6 Constructor injection Usage \u00b6 Maven \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <repositories> <repository> <id> lusory-repo-releases </id> <url> https://repo.lusory.dev/releases </url> </repository> <repository> <id> lusory-repo-snapshots </id> <url> https://repo.lusory.dev/snapshots </url> </repository> </repositories> <dependencies> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> core </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> <!-- optional kotlin extensions (transitively pulls in core) --> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> kotlin </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> </dependencies> Gradle \u00b6 Groovy DSL \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 repositories { maven { url 'https://repo.lusory.dev/releases' } maven { url 'https://repo.lusory.dev/snapshots' } } dependencies { implementation 'me.lusory.toothpick:core:0.0.1-SNAPSHOT' // optional kotlin extensions (transitively pulls in core) implementation 'me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT' } Kotlin DSL \u00b6 1 2 3 4 5 6 7 8 9 10 repositories { maven ( \"https://repo.lusory.dev/releases\" ) maven ( \"https://repo.lusory.dev/snapshots\" ) } dependencies { implementation ( \"me.lusory.toothpick:core:0.0.1-SNAPSHOT\" ) // optional kotlin extensions (transitively pulls in core) implementation ( \"me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT\" ) }","title":"Home"},{"location":"#home","text":"toothpick is a simple, lightweight dependency injection framework ( JSR-330 ) for JVM based languages.","title":"Home"},{"location":"#features","text":"Constructor injection","title":"Features"},{"location":"#usage","text":"","title":"Usage"},{"location":"#maven","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <repositories> <repository> <id> lusory-repo-releases </id> <url> https://repo.lusory.dev/releases </url> </repository> <repository> <id> lusory-repo-snapshots </id> <url> https://repo.lusory.dev/snapshots </url> </repository> </repositories> <dependencies> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> core </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> <!-- optional kotlin extensions (transitively pulls in core) --> <dependency> <groupId> me.lusory.toothpick </groupId> <artifactId> kotlin </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> </dependencies>","title":"Maven"},{"location":"#gradle","text":"","title":"Gradle"},{"location":"#groovy-dsl","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 repositories { maven { url 'https://repo.lusory.dev/releases' } maven { url 'https://repo.lusory.dev/snapshots' } } dependencies { implementation 'me.lusory.toothpick:core:0.0.1-SNAPSHOT' // optional kotlin extensions (transitively pulls in core) implementation 'me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT' }","title":"Groovy DSL"},{"location":"#kotlin-dsl","text":"1 2 3 4 5 6 7 8 9 10 repositories { maven ( \"https://repo.lusory.dev/releases\" ) maven ( \"https://repo.lusory.dev/snapshots\" ) } dependencies { implementation ( \"me.lusory.toothpick:core:0.0.1-SNAPSHOT\" ) // optional kotlin extensions (transitively pulls in core) implementation ( \"me.lusory.toothpick:kotlin:0.0.1-SNAPSHOT\" ) }","title":"Kotlin DSL"},{"location":"examples/","text":"Examples \u00b6 Creating an Injector \u00b6 An Injector instance can be created with the Injector#of method (invoke operator for Kotlin is available). Java \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector ; // ... // dynamically populated injector (no providers by default) final Injector injector = Injector . of (); // pre-populated injector final Injector injector = Injector . of ( new Module1 ()); // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 . class ); // equals to injector.provider(Module1.class).get() injector . instance ( Module1 . class ); Kotlin \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector // ... // dynamically populated injector (no providers by default) val injector = Injector () // pre-populated injector val injector = Injector ( Module1 ()) // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 :: class ) // equals to injector . provider ( Module1 . class ). get () injector [ Module1 :: class ]","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#creating-an-injector","text":"An Injector instance can be created with the Injector#of method (invoke operator for Kotlin is available).","title":"Creating an Injector"},{"location":"examples/#java","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector ; // ... // dynamically populated injector (no providers by default) final Injector injector = Injector . of (); // pre-populated injector final Injector injector = Injector . of ( new Module1 ()); // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 . class ); // equals to injector.provider(Module1.class).get() injector . instance ( Module1 . class );","title":"Java"},{"location":"examples/#kotlin","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import me.lusory.toothpick.Injector // ... // dynamically populated injector (no providers by default) val injector = Injector () // pre-populated injector val injector = Injector ( Module1 ()) // ... // retrieves a javax.inject.Provider instance, // which instantiates the Module1 class with the no-arg or @javax.inject.Inject-annotated constructor, // following the dependency chain to satisfy the dependencies injector . provider ( Module1 :: class ) // equals to injector . provider ( Module1 . class ). get () injector [ Module1 :: class ]","title":"Kotlin"}]}